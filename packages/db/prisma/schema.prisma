datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  lastActivityAt          DateTime                  @default(now())
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  apiToken                String?
  CollaboratorsOnTypebots CollaboratorsOnTypebots[]
  company                 String?
  onboardingCategories    String[]
  graphNavigation         GraphNavigation?
  workspaces              MemberInWorkspace[]
}

model Workspace {
  id            String                @id @default(cuid())
  name          String
  icon          String?
  members       MemberInWorkspace[]
  folders       DashboardFolder[]
  typebots      Typebot[]
  createdAt     DateTime              @default(now())
  plan          Plan @default(FREE)
  stripeId      String?               @unique
  customDomains CustomDomain[]
  credentials   Credentials[]
  invitations   WorkspaceInvitation[]
}

model MemberInWorkspace {
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        WorkspaceRole

  @@unique([userId, workspaceId])
}

enum WorkspaceRole {
  ADMIN
  MEMBER
  GUEST
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  email       String
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  type        WorkspaceRole
}

enum GraphNavigation {
  MOUSE
  TRACKPAD
}

model CustomDomain {
  name        String    @id
  createdAt   DateTime  @default(now())
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Credentials {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  data        String // Encrypted data
  name        String
  type        String
  iv          String
}

enum Plan {
  FREE
  PRO
  TEAM
  LIFETIME
  OFFERED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DashboardFolder {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  name           String
  parentFolderId String?
  parentFolder   DashboardFolder?  @relation("ParentChild", fields: [parentFolderId], references: [id])
  childrenFolder DashboardFolder[] @relation("ParentChild")
  typebots       Typebot[]
  workspaceId    String?
  workspace      Workspace?        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Typebot {
  id                 String                    @id @default(cuid())
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @default(now()) @updatedAt
  icon               String?
  name               String
  publishedTypebotId String?
  publishedTypebot   PublicTypebot?
  results            Result[]
  folderId           String?
  folder             DashboardFolder?          @relation(fields: [folderId], references: [id])
  blocks             Json[]
  variables          Json[]
  edges              Json[]
  theme              Json
  settings           Json
  publicId           String?                   @unique
  customDomain       String?                   @unique
  collaborators      CollaboratorsOnTypebots[]
  invitations        Invitation[]
  webhooks           Webhook[]
  workspaceId        String?
  workspace          Workspace?                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Invitation {
  createdAt DateTime          @default(now())
  email     String
  typebotId String
  typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  type      CollaborationType

  @@unique([email, typebotId])
}

model CollaboratorsOnTypebots {
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  typebotId String
  typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  type      CollaborationType

  @@unique([userId, typebotId])
}

enum CollaborationType {
  READ
  WRITE
  FULL_ACCESS
}

model PublicTypebot {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  typebotId    String   @unique
  typebot      Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  name         String
  blocks       Json[]
  variables    Json[]
  edges        Json[]
  theme        Json
  settings     Json
  publicId     String?  @unique
  customDomain String?  @unique
}

model Result {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  typebotId   String
  typebot     Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  answers     Answer[]
  variables   Json[]
  isCompleted Boolean
  logs        Log[]
}

model Log {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  resultId    String
  result      Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)
  status      String
  description String
  details     String?
}

model Answer {
  createdAt  DateTime @default(now())
  resultId   String
  result     Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)
  stepId     String
  blockId    String
  variableId String?
  content    String

  @@unique([resultId, blockId, stepId])
}

model Coupon {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Webhook {
  id          String  @id @default(cuid())
  url         String?
  method      String
  queryParams Json[]
  headers     Json[]
  body        String?
  typebotId   String
  typebot     Typebot @relation(fields: [typebotId], references: [id], onDelete: Cascade)
}
